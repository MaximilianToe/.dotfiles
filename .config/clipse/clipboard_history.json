{"clipboardHistory":[{"value":"xdg-mime query default application/pdf\n","recorded":"2024-08-29 17:10:01.550728671","filePath":"null","pinned":false},{"value":"xdg-mime default org.pwmt.zathura.desktop application/pdf\n","recorded":"2024-08-29 17:09:45.610431482","filePath":"null","pinned":false},{"value":"file:///home/max/Downloads/Bewerbermappe_Maximilian_T%C3%B6nies.pdf\r\n","recorded":"2024-08-29 17:06:19.307079973","filePath":"null","pinned":false},{"value":"\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003c!DOCTYPE keyboard SYSTEM \"file://localhost/System/Library/DTDs/KeyboardLayout.dtd\"\u003e\n\u003ckeyboard group=\"0\" id=\"1000\" name=\"CustomKeyboardLayout\"\u003e\n    \u003clayouts\u003e\n        \u003clayout first=\"0\" last=\"0\"\u003e\n            \u003cmodifierMap id=\"0\" defaultIndex=\"0\"\u003e\n                \u003ckeyMapSelect mapIndex=\"0\"/\u003e\n            \u003c/modifierMap\u003e\n        \u003c/layout\u003e\n    \u003c/layouts\u003e\n    \u003ckeyMapSet id=\"0\"\u003e\n        \u003ckeyMap index=\"0\"\u003e\n            \u003c!-- Row 1 --\u003e\n            \u003ckey code=\"50\" output=\"`\" outputShift=\"~\"/\u003e \u003c!-- TLDE --\u003e\n            \u003ckey code=\"18\" output=\"1\" outputShift=\"!\"/\u003e\n            \u003ckey code=\"19\" output=\"2\" outputShift=\"@\"/\u003e\n            \u003ckey code=\"20\" output=\"3\" outputShift=\"#\"/\u003e\n            \u003ckey code=\"21\" output=\"4\" outputShift=\"$\"/\u003e\n            \u003ckey code=\"23\" output=\"5\" outputShift=\"%\"/\u003e\n            \u003ckey code=\"22\" output=\"6\" outputShift=\"^\"/\u003e\n            \u003ckey code=\"26\" output=\"7\" outputShift=\"\u0026\"/\u003e\n            \u003ckey code=\"28\" output=\"8\" outputShift=\"*\"/\u003e\n            \u003ckey code=\"25\" output=\"9\" outputShift=\"(\"/\u003e\n            \u003ckey code=\"24\" output=\"0\" outputShift=\")\"/\u003e\n            \u003ckey code=\"27\" output=\"-\" outputShift=\"_\"/\u003e\n            \u003ckey code=\"29\" output=\"=\" outputShift=\"+\"/\u003e\n            \u003c!-- Row 2 --\u003e\n            \u003ckey code=\"12\" output=\"q\"/\u003e\n            \u003ckey code=\"13\" output=\"w\"/\u003e\n            \u003ckey code=\"14\" output=\"e\"/\u003e\n            \u003ckey code=\"15\" output=\"r\"/\u003e\n            \u003ckey code=\"17\" output=\"t\"/\u003e\n            \u003ckey code=\"16\" output=\"y\"/\u003e\n            \u003ckey code=\"32\" output=\"u\"/\u003e\n            \u003ckey code=\"34\" output=\"i\"/\u003e\n            \u003ckey code=\"31\" output=\"o\"/\u003e\n            \u003ckey code=\"35\" output=\"p\"/\u003e\n            \u003ckey code=\"33\" output=\"[\" outputShift=\"{\"/\u003e\n            \u003ckey code=\"30\" output=\"]\" outputShift=\"}\"/\u003e\n            \u003c!-- Row 3 --\u003e\n            \u003ckey code=\"0\" output=\"a\"/\u003e\n            \u003ckey code=\"1\" output=\"s\"/\u003e\n            \u003ckey code=\"2\" output=\"d\"/\u003e\n            \u003ckey code=\"3\" output=\"f\"/\u003e\n            \u003ckey code=\"5\" output=\"g\"/\u003e\n            \u003ckey code=\"4\" output=\"h\"/\u003e\n            \u003ckey code=\"6\" output=\"j\"/\u003e\n            \u003ckey code=\"7\" output=\"k\"/\u003e\n            \u003ckey code=\"8\" output=\"l\"/\u003e\n            \u003ckey code=\"9\" output=\";\" outputShift=\":\"/\u003e\n            \u003ckey code=\"10\" output=\"'\" outputShift=\"\"/\u003e\n            \u003ckey code=\"11\" output=\"\\\" outputShift=\"|\"/\u003e\n            \u003c!-- Row 4 --\u003e\n            \u003ckey code=\"38\" output=\"z\"/\u003e\n            \u003ckey code=\"37\" output=\"x\"/\u003e\n            \u003ckey code=\"39\" output=\"c\"/\u003e\n            \u003ckey code=\"40\" output=\"v\"/\u003e\n            \u003ckey code=\"41\" output=\"b\"/\u003e\n            \u003ckey code=\"43\" output=\"n\"/\u003e\n            \u003ckey code=\"42\" output=\"m\"/\u003e\n            \u003ckey code=\"44\" output=\",\" outputShift=\"\u003c\"/\u003e\n            \u003ckey code=\"45\" output=\".\" outputShift=\"\u003e\"/\u003e\n            \u003ckey code=\"46\" output=\"/\" outputShift=\"?\"/\u003e\n        \u003c/keyMap\u003e\n    \u003c/keyMapSet\u003e\n\u003c/keyboard\u003e\n","recorded":"2024-08-29 13:05:34.021003015","filePath":"null","pinned":false},{"value":"    key \u003cTLDE\u003e\t{[   \t dollar, asciitilde\t]};\n    key \u003cAE01\u003e\t{[\t plus,\t 1\t\t]};\n    key \u003cAE02\u003e\t{[\t bracketleft,2\t\t]};\n    key \u003cAE03\u003e\t{[\t braceleft,\t 3\t\t]};\n    key \u003cAE04\u003e\t{[\t parenleft,\t 4\t\t]};\n    key \u003cAE05\u003e\t{[\t equal,\t 5\t\t]};\n    key \u003cAE06\u003e\t{[\t ampersand,\t 6\t\t]};\n    key \u003cAE07\u003e\t{[\t asterisk,\t 7\t\t]};\n    key \u003cAE08\u003e\t{[\t parenright,\t 8\t\t]};\n    key \u003cAE09\u003e\t{[\t braceright,\t 9\t\t]};\n    key \u003cAE10\u003e\t{[\t bracketright,\t 0\t\t]};\n    key \u003cAE11\u003e\t{[   \t percent,\t asciicircum\t\t]};\n    key \u003cAE12\u003e\t{[   \t at,\t grave\t\t]};\n\n    key \u003cAD01\u003e\t{[\t q,\t Q\t\t]};\n    key \u003cAD02\u003e\t{[\t w,\t W\t\t]};\n    key \u003cAD03\u003e\t{[\t e,\t E\t\t]};\n    key \u003cAD04\u003e\t{[\t r,\t R\t\t]};\n    key \u003cAD05\u003e\t{[\t t,\t T\t\t]};\n    key \u003cAD06\u003e\t{[\t y,\t Y\t\t]};\n    key \u003cAD07\u003e\t{[\t u,\t U\t\t]};\n    key \u003cAD08\u003e\t{[\t i,\t I\t\t]};\n    key \u003cAD09\u003e\t{[\t o,\t O\t\t]};\n    key \u003cAD10\u003e\t{[\t p,\t P\t\t]};\n    key \u003cAD11\u003e\t{[ \t minus,\t underscore\t]};\n    key \u003cAD12\u003e\t{[ \t exclam, numbersign\t]};\n\n    key \u003cAC01\u003e\t{[\t a,\t A\t\t]};\n    key \u003cAC02\u003e\t{[\t s,\t S\t\t]};\n    key \u003cAC03\u003e\t{[\t d,\t D\t\t]};\n    key \u003cAC04\u003e\t{[\t f,\t F\t\t]};\n    key \u003cAC05\u003e\t{[\t g,\t G\t\t]};\n    key \u003cAC06\u003e\t{[\t h,\t H\t\t]};\n    key \u003cAC07\u003e\t{[\t j,\t J\t\t]};\n    key \u003cAC08\u003e\t{[\t k,\t K\t\t]};\n    key \u003cAC09\u003e\t{[\t l,\t L\t\t]};\n    key \u003cAC10\u003e\t{[ semicolon,\t colon\t\t]};\n    key \u003cAC11\u003e\t{[ apostrophe,\t quotedbl\t]};\n    key \u003cBKSL\u003e\t{[ backslash,\t bar\t\t]};\n\n    key \u003cAB01\u003e\t{[\t z,\t Z\t\t]};\n    key \u003cAB02\u003e\t{[\t x,\t X\t\t]};\n    key \u003cAB03\u003e\t{[\t c,\t C\t\t]};\n    key \u003cAB04\u003e\t{[\t v,\t V\t\t]};\n    key \u003cAB05\u003e\t{[\t b,\t B\t\t]};\n    key \u003cAB06\u003e\t{[\t n,\t N\t\t]};\n    key \u003cAB07\u003e\t{[\t m,\t M\t\t]};\n    key \u003cAB08\u003e\t{[   comma,\t less\t\t]};\n    key \u003cAB09\u003e\t{[  period,\t greater\t]};\n    key \u003cAB10\u003e\t{[   slash,\t question\t]};\n","recorded":"2024-08-29 13:04:09.321030081","filePath":"null","pinned":false},{"value":"import math\nimport torch\nfrom torch.optim.optimizer import Optimizer\nimport time\nimport tensorflow as tf\n\n\n\nclass MTAdam(Optimizer):\n    r\"\"\"Implements MTAdam algorithm.\n\n    Arguments:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 1e-3)\n        betas (Tuple[float, float], optional): coefficients used for computing\n            running averages of gradient and its square (default: (0.9, 0.999))\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n        amsgrad (boolean, optional): whether to use the AMSGrad variant of this\n            algorithm from the paper `On the Convergence of Adam and Beyond`_\n            (default: False)\n\n    \"\"\"\n    def __init__(self, params, lr=1e-3, betas=(0.9, 0.999, 0.9), eps=1e-8,\n                 weight_decay=0, amsgrad=False):\n        if not 0.0 \u003c= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 \u003c= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 \u003c= betas[0] \u003c 1.0:\n            raise ValueError(\"Invalid beta parameter at index 0: {}\".format(betas[0]))\n        if not 0.0 \u003c= betas[1] \u003c 1.0:\n            raise ValueError(\"Invalid beta parameter at index 1: {}\".format(betas[1]))\n        if not 0.0 \u003c= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        defaults = dict(lr=lr, betas=betas, eps=eps,\n                        weight_decay=weight_decay, amsgrad=amsgrad)\n        super(MTAdam, self).__init__(params, defaults)\n\n        self.total_grad = 0\n        self.training_step = 0\n\n    def __setstate__(self, state):\n        super(MTAdam, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('amsgrad', False)\n\n    # assuming feature_map has requires_grad=True)\n    # compared to adam, these are the added objects: loss_array, ranks, feature_map,\n    @torch.no_grad()\n    def step(self, loss_array, ranks, feature_map, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        self.update_weights(loss_array, ranks)\n\n        return loss\n\n    def update_weights(self, loss_array, ranks):\n\n      for loss_index, loss in enumerate(loss_array):\n        loss.backward(retain_graph=True)\n        for group in self.param_groups:\n          for p in group['params']:\n\n            if p.grad is None:\n              print(\"breaking\")\n              break\n\n            if p.grad.is_sparse:\n              raise RuntimeError('MTAdam does not support sparse gradients')\n\n            amsgrad = group['amsgrad']\n\n            state = self.state[p]\n\n            # State initialization\n            if len(state) == 0:\n              state['step'] = 1\n              for j, _ in enumerate(loss_array):\n                # Exponential moving average of gradient values\n                state['exp_avg'+str(j)] = torch.zeros_like(p.data)\n                # Exponential moving average of squared gradient values\n                state['exp_avg_sq'+str(j)] = torch.zeros_like(p.data)\n                if amsgrad:\n                  # Maintains max of all exp. moving avg. of sq. grad. values\n                  state['max_exp_avg_sq'+str(j)] = torch.zeros_like(p.data)\n\n                if j == 0: p.norms = [torch.ones(1).cuda()]\n                else: p.norms.append(torch.ones(1).cuda())\n\n            beta1, beta2, beta3 = group['betas']\n\n            # normalize the norm of current loss gradients to be the same as the anchor\n            if state['step'] == 1:\n              p.norms[loss_index] = torch.norm(p.grad)\n            else:\n              p.norms[loss_index] = (p.norms[loss_index]*beta3) + ((1-beta3)*torch.norm(p.grad))\n            if p.norms[loss_index] \u003e 1e-10:\n              for anchor_index in range(len(loss_array)):\n                if p.norms[anchor_index] \u003e 1e-10:\n                  p.grad = ranks[loss_index] * p.norms[anchor_index] * p.grad / p.norms[loss_index]\n                  break\n\n            exp_avg, exp_avg_sq = state['exp_avg'+str(loss_index)], state['exp_avg_sq'+str(loss_index)]\n            if amsgrad:\n              max_exp_avg_sq = state['max_exp_avg_sq'+str(loss_index)]\n\n            bias_correction1 = 1 - beta1 ** state['step']\n            bias_correction2 = 1 - beta2 ** state['step']\n            if loss_index == len(loss_array) - 1:\n              state['step'] += 1\n\n            if group['weight_decay'] != 0:\n              p.grad = p.grad.add(p, alpha=group['weight_decay'])\n\n            exp_avg.mul_(beta1).add_(p.grad, alpha=1 - beta1)\n            exp_avg_sq.mul_(beta2).addcmul_(p.grad, p.grad, value=1 - beta2)\n            if amsgrad:\n              # Maintains the maximum of all 2nd moment running avg. till now\n              torch.max(max_exp_avg_sq, exp_avg_sq, out=max_exp_avg_sq)\n              # Use the max. for normalizing running avg. of gradient\n              denom = (max_exp_avg_sq.sqrt() / math.sqrt(bias_correction2)).add_(group['eps'])\n            else:\n              denom = (exp_avg_sq.sqrt() / math.sqrt(bias_correction2)).add_(group['eps'])\n\n            step_size = group['lr'] / bias_correction1\n\n            if loss_index == 0 or not hasattr(p, 'exp_avg'):\n              p.exp_avg = [exp_avg]\n              p.denom = [denom]\n              p.step_size = [step_size]\n            else:\n              p.exp_avg.append(exp_avg)\n              p.denom.append(denom)\n              p.step_size.append(step_size)\n            if p.grad is not None:\n              p.grad.detach_()\n              p.grad.zero_()\n\n      for group in self.param_groups:\n        for p in group['params']:\n          temp = 0\n          max_denom = p.denom[0]\n          for index in range(1, len(p.exp_avg)):\n              max_denom = torch.max(max_denom, p.denom[index])\n\n          for index in range(len(p.exp_avg)):\n            update_step = -p.step_size[index]*(p.exp_avg[index]/max_denom)\n            temp += update_step\n          p.add_(temp)\n\n      self.training_step += 1","recorded":"2024-08-28 18:44:25.547235713","filePath":"null","pinned":false},{"value":"total_size = len(dataset)\nfull_data_loader = DataLoader(dataset, shuffle=False)\ntrain_size = int(0.85*total_size)\ntest_size = int(0.1*total_size)\nval_size = total_size-train_size-test_size\n\ntrain_set, test_set, val_set = random_split(dataset, [train_size, test_size, val_size])\n\nbatch_size =  2048 \n\n#change number of workers\ntrain_loader = DataLoader(train_set, batch_size, shuffle=True)\ntest_loader = DataLoader(test_set, batch_size, shuffle=False )\nval_loader = DataLoader(val_set,batch_size, shuffle=False )\n","recorded":"2024-08-28 18:44:25.542698629","filePath":"null","pinned":false},{"value":"#states= torch.load(\"./saved_models/darknet_144_128_256_512.pth\")\n#model.load_state_dict(states)\n","recorded":"2024-08-28 18:36:41.543861881","filePath":"null","pinned":false},{"value":"https://www.immobilienscout24.de/expose/153073313?referrer=SHORTLIST\u0026NavigationBarType=SHORTLIST\u0026NavigationServiceUrl=%2Fmerkzettel%2Fmyscout%3FsortBy%3Dcreated%2540desc#/","recorded":"2024-08-28 17:46:47.084164243","filePath":"null","pinned":false},{"value":"für Ihre ","recorded":"2024-08-28 17:23:42.031061355","filePath":"null","pinned":false},{"value":"                                 at 16:43:0 ~                                                                                                          at 16:43:05\n❯\n\n\n\n\n\n\n\n\n\n\n\n\n\n","recorded":"2024-08-28 16:43:22.922105983","filePath":"null","pinned":false},{"value":"https://www.youtube.com/watch?v=vepAZ6KsmWQ\u0026t=49s","recorded":"2024-08-28 10:18:32.94982498","filePath":"null","pinned":false},{"value":"                    rangeGrid[j,:] = torch.max(torch.min(self.rangeIndices[j,:] - currentLeft, 0), totalLength -1)\n","recorded":"2024-08-27 22:43:39.565374621","filePath":"null","pinned":false},{"value":"            peakIndices, _ = torch.where((retentionTime == peakTime))\n            peakIndices = peakIndices.view(-1, 1)\n            leftIndices, _ = torch.where((retentionTime == leftTime))\n            leftIndices = leftIndices.view(-1, 1)\n            rightIndices, _ = torch.where((retentionTime == rightTime))\n            rightIndices = rightIndices.view(-1, 1)\n            rangeIndices = torch.cat((leftIndices, rightIndices), dim=1)\n            labels = torch.ones((lenFeatures, 1), dtype=torch.float32)\n\n            # Adds zero padding if there are not enough features\n            if lenFeatures \u003c self.numFeatures:\n                paddingMax = torch.zeros(\n                    (self.numFeatures - lenFeatures, 1), dtype=torch.float32\n                )\n                paddingRange = torch.zeros(\n                    (self.numFeatures - lenFeatures, 2), dtype=torch.float32\n                )\n                paddingLabels = torch.zeros(\n                    (self.numFeatures - lenFeatures, 1), dtype=torch.float32\n                )\n                self.peakIndices = torch.cat((peakIndices, paddingMax), dim=0)\n                self.rangeIndices = torch.cat((rangeIndices, paddingRange), dim=0)\n                self.labels = torch.cat((labels, paddingLabels), dim=0)\n            # If there are enough features, cut out only the firstones\n            else:\n                self.peakIndecies = peakIndices[: self.numFeatures, :]\n                self.rangeIndices = rangeIndices[: self.numFeatures, :]\n                self.labels = labels[: self.numFeatures, :]\n","recorded":"2024-08-27 14:24:16.018014793","filePath":"null","pinned":false},{"value":"            peakTime = torch.tensor(\n                df.peak[~df.peak.isnull()].to_numpy(), dtype=torch.float32\n            ).view(1, -1)\n            leftTime = torch.tensor(\n                df.left[~df.left.isnull()].to_numpy(), dtype=torch.float32\n            ).view(1, -1)\n            rightTime = torch.tensor(\n                df.right[~df.right.isnull()].to_numpy(), dtype=torch.float32\n            ).view(1, -1)\n            lenFeatures = peakTime.shape[1]\n","recorded":"2024-08-27 14:23:07.648689615","filePath":"null","pinned":false},{"value":"            print(str(type(e)) + \" when loading file with path: \" + self.path)\n","recorded":"2024-08-27 13:46:33.175944923","filePath":"null","pinned":false},{"value":"com.intellij.openapi.wm.impl.welcomeScreen.ProjectsTab@7373d1e3","recorded":"2024-08-27 09:52:12.319434953","filePath":"null","pinned":false},{"value":"    config = function()\n      vim.cmd(\"imap \u003csilent\u003e\u003cscript\u003e\u003cexpr\u003e \u003cC-J\u003e copilot#Accept('\u003cCR\u003e')\")\n      vim.g.copilot_no_tab_map = true\n      vim.g.copilot_assume_mapped = true\n      vim.g.copilot_filetypes = {\n        [\"*\"] = true,\n        [\"markdown\"] = false,\n        [\"text\"] = false,\n      }","recorded":"2024-08-26 18:28:07.106572326","filePath":"null","pinned":false},{"value":"git clone https://github.com/github/copilot.vim.git \\\n  ~/.config/nvim/pack/github/start/copilot.vim","recorded":"2024-08-26 18:22:35.133028812","filePath":"null","pinned":false},{"value":"    {\n        \"ellisonleao/gruvbox.nvim\",\n        name = \"gruvbox\",\n        config = function()\n            require(\"gruvbox\").setup({\n                terminal_colors = true, -- add neovim terminal colors\n                undercurl = true,\n                underline = false,\n                bold = true,\n                italic = {\n                    strings = false,\n                    emphasis = false,\n                    comments = false,\n                    operators = false,\n                    folds = false,\n                },\n                strikethrough = true,\n                invert_selection = false,\n                invert_signs = false,\n                invert_tabline = false,\n                invert_intend_guides = false,\n                inverse = true, -- invert background for search, diffs, statuslines and errors\n                contrast = \"\", -- can be \"hard\", \"soft\" or empty string\n                palette_overrides = {},\n                overrides = {},\n                dim_inactive = false,\n                transparent_mode = false,\n            })\n        end,\n    },","recorded":"2024-08-26 17:12:26.366065913","filePath":"null","pinned":false},{"value":"# Default colors\n[colors.primary]\nbackground = '#292C3E'\nforeground = '#EBEBEB'\n\n# Cursor colors\n[colors.cursor]\ntext = '#EBEBEB'\ncursor = '#FF261E'\n\n# Normal colors\n[colors.normal]\nblack   = '#0d0d0d'\nred     = '#FF301B'\ngreen   = '#A0E521'\nyellow  = '#FFC620'\nblue    = '#1BA6FA'\nmagenta = '#8763B8'\ncyan    = '#21DEEF'\nwhite   = '#EBEBEB'\n\n# Bright colors\n[colors.bright]\nblack   = '#6D7070'\nred     = '#FF4352'\ngreen   = '#B8E466'\nyellow  = '#FFD750'\nblue    = '#1BA6FA'\nmagenta = '#A578EA'\ncyan    = '#73FBF1'\nwhite   = '#FEFEF8'","recorded":"2024-08-26 16:55:00.352288028","filePath":"null","pinned":false},{"value":"git@github.com:MaximilianToe/nvim.git","recorded":"2024-08-26 16:49:29.644732302","filePath":"null","pinned":false},{"value":"Dynamic GP-18","recorded":"2024-08-26 14:18:45.717401841","filePath":"null","pinned":false},{"value":"Aspect 140 mm PWM ","recorded":"2024-08-26 13:52:51.153599091","filePath":"null","pinned":false},{"value":"function ColorMyPencils(color)\n\tcolor = color or \"rose-pine\"\n\tvim.cmd.colorscheme(color)\n\n\tvim.api.nvim_set_hl(0, \"Normal\", { bg = \"none\" })\n\tvim.api.nvim_set_hl(0, \"NormalFloat\", { bg = \"none\" })\n\nend\n\nreturn {\n    {\n        \"folke/tokyonight.nvim\",\n        config = function()\n            require(\"tokyonight\").setup({\n                -- your configuration comes here\n                -- or leave it empty to use the default settings\n                style = \"storm\", -- The theme comes in three styles, `storm`, `moon`, a darker variant `night` and `day`\n                transparent = true, -- Enable this to disable setting the background color\n                terminal_colors = true, -- Configure the colors used when opening a `:terminal` in Neovim\n                styles = {\n                    -- Style to be applied to different syntax groups\n                    -- Value is any valid attr-list value for `:help nvim_set_hl`\n                    comments = { italic = false },\n                    keywords = { italic = false },\n                    -- Background styles. Can be \"dark\", \"transparent\" or \"normal\"\n                    sidebars = \"dark\", -- style for sidebars, see below\n                    floats = \"dark\", -- style for floating windows\n                },\n            })\n        end\n    },\n\n    {\n        \"rose-pine/neovim\",\n        name = \"rose-pine\",\n        config = function()\n            require('rose-pine').setup({\n                disable_background = true,\n            })\n\n            vim.cmd(\"colorscheme rose-pine\")\n\n            ColorMyPencils()\n        end\n    },\n\n\n}\n","recorded":"2024-08-25 23:55:56.547089878","filePath":"null","pinned":false},{"value":"# Source https://github.com/bluz71/vim-nightfly-colors\n\n[colors.bright]\nblack = \"#7c8f8f\"\nblue = \"#82aaff\"\ncyan = \"#7fdbca\"\ngreen = \"#21c7a8\"\nmagenta = \"#ae81ff\"\nred = \"#ff5874\"\nwhite = \"#d6deeb\"\nyellow = \"#ecc48d\"\n\n[colors.cursor]\ncursor = \"#9ca1aa\"\ntext = \"#080808\"\n\n[colors.normal]\nblack = \"#1d3b53\"\nblue = \"#82aaff\"\ncyan = \"#7fdbca\"\ngreen = \"#a1cd5e\"\nmagenta = \"#c792ea\"\nred = \"#fc514e\"\nwhite = \"#a1aab8\"\nyellow = \"#e3d18a\"\n\n[colors.primary]\nbackground = \"#011627\"\nbright_foreground = \"#eeeeee\"\nforeground = \"#bdc1c6\"\n\n[colors.selection]\nbackground = \"#b2ceee\"\ntext = \"#080808\"","recorded":"2024-08-25 23:30:49.927835452","filePath":"null","pinned":false},{"value":"function ColorMyPencils(color)\n\tcolor = color or \"rose-pine\"\n\tvim.cmd.colorscheme(color)\n\n\tvim.api.nvim_set_hl(0, \"Normal\", { bg = \"none\" })\n\tvim.api.nvim_set_hl(0, \"NormalFloat\", { bg = \"none\" })\n\nend\n\nreturn {\n    {\n        \"folke/tokyonight.nvim\",\n        config = function()\n            require(\"tokyonight\").setup({\n                -- your configuration comes here\n                -- or leave it empty to use the default settings\n                style = \"storm\", -- The theme comes in three styles, `storm`, `moon`, a darker variant `night` and `day`\n                transparent = true, -- Enable this to disable setting the background color\n                terminal_colors = true, -- Configure the colors used when opening a `:terminal` in Neovim\n                styles = {\n                    -- Style to be applied to different syntax groups\n                    -- Value is any valid attr-list value for `:help nvim_set_hl`\n                    comments = { italic = false },\n                    keywords = { italic = false },\n                    -- Background styles. Can be \"dark\", \"transparent\" or \"normal\"\n                    sidebars = \"dark\", -- style for sidebars, see below\n                    floats = \"dark\", -- style for floating windows\n                },\n            })\n        end\n    },\n\n    {\n        \"rose-pine/neovim\",\n        name = \"rose-pine\",\n        config = function()\n            require('rose-pine').setup({\n                disable_background = true,\n            })\n\n            vim.cmd(\"colorscheme rose-pine\")\n\n            ColorMyPencils()\n        end\n    },\n\n\n}","recorded":"2024-08-25 23:12:53.720223633","filePath":"null","pinned":false},{"value":"git clone git@github.com:ThePrimeagen/vim-nav-playground.git","recorded":"2024-08-25 19:14:30.272975367","filePath":"null","pinned":false},{"value":"nnoremap \u003cC-w\u003e 'W\n","recorded":"2024-08-25 19:14:30.266271391","filePath":"null","pinned":false},{"value":"nnoremap \u003cleader\u003e\u003cC-w\u003e mW\n","recorded":"2024-08-25 19:14:26.374154488","filePath":"null","pinned":false},{"value":"    public NDList processInput(TranslatorContext ctx, double[] input) {\n    NDArray array = this.manager.create(input);\n    return new NDList(array);\n  }\n","recorded":"2024-08-25 16:02:42.242216347","filePath":"null","pinned":false},{"value":"    public NDList processInput(TranslatorContext ctx, double[] input) {\n","recorded":"2024-08-25 16:02:20.466587462","filePath":"null","pinned":false},{"value":"    System.out.println(leftIndices.toString());\n","recorded":"2024-08-25 12:21:24.966942167","filePath":"null","pinned":false},{"value":"vim.keymap.set(\"n\", \"\u003cleader\u003epv\", vim.cmd.Ex)\n","recorded":"2024-08-24 23:36:13.746937053","filePath":"null","pinned":false},{"value":"vim.keymap.set(\"n\", \"n\", \"nzzzv\")\nvim.keymap.set(\"n\", \"N\", \"Nzzzv\")\n","recorded":"2024-08-24 23:33:25.480042611","filePath":"null","pinned":false},{"value":"vim.keymap.set(\"n\", \"\u003cC-d\u003e\", \"\u003cC-d\u003ezz\")\nvim.keymap.set(\"n\", \"\u003cC-u\u003e\", \"\u003cC-u\u003ezz\")\n","recorded":"2024-08-24 23:32:28.932585303","filePath":"null","pinned":false},{"value":"nnoremap \u003cC-d\u003e \u003cC-d\u003ezz\n","recorded":"2024-08-24 23:32:28.926551546","filePath":"null","pinned":false},{"value":"\" Define a mapping to start a global replacement of the word under the cursor\nnnoremap \u003cleader\u003es :%s/\u003cC-r\u003e\u003cC-w\u003e/\u003cC-r\u003e\u003cC-w\u003e/gI\u003cLeft\u003e\u003cLeft\u003e\u003cLeft\u003e\n","recorded":"2024-08-24 23:27:03.659850979","filePath":"null","pinned":false},{"value":"vim.keymap.set(\"n\", \"\u003cleader\u003es\", [[:%s/\\\u003c\u003cC-r\u003e\u003cC-w\u003e\\\u003e/\u003cC-r\u003e\u003cC-w\u003e/gI\u003cLeft\u003e\u003cLeft\u003e\u003cLeft\u003e]])\n","recorded":"2024-08-24 23:24:12.738742956","filePath":"null","pinned":false},{"value":":%s/\\\u003c\u003cC-r\u003e\u003cC-w\u003e\\\u003e/\u003cC-r\u003e\u003cC-w\u003e/gI\u003cLeft\u003e\u003cLeft\u003e\u003cLeft\u003e","recorded":"2024-08-24 23:22:17.102129666","filePath":"null","pinned":false},{"value":"test\ntest\n","recorded":"2024-08-24 23:21:48.416891273","filePath":"null","pinned":false},{"value":"vim.keymap.set(\"n\", \"\u003cleader\u003ek\", \"\u003ccmd\u003elnext\u003cCR\u003ezz\")\nvim.keymap.set(\"n\", \"\u003cleader\u003ej\", \"\u003ccmd\u003elprev\u003cCR\u003ezz\")\n","recorded":"2024-08-24 23:18:29.843224617","filePath":"null","pinned":false},{"value":"\" Function to delete selected text to the black hole register and paste from default register\nfunction! BlackHoleAndPaste()\n  \" Delete the selected text to the black hole register\n  normal! \"_d\n\n  \" Paste from the default register\n  normal! p\nendfunction\n","recorded":"2024-08-24 23:12:58.104579748","filePath":"null","pinned":false},{"value":"test\n","recorded":"2024-08-24 23:12:58.090058102","filePath":"null","pinned":false},{"value":"function! BlackHoleAndPaste()\n  normal! \"_d\n  normal! P\nendfunction\n","recorded":"2024-08-24 23:08:35.9464803","filePath":"null","pinned":false},{"value":"vim.keymap.set(\"x\", \"\u003cleader\u003ep\", [[\"_dP]])\n","recorded":"2024-08-24 23:01:04.904093175","filePath":"null","pinned":false},{"value":"function! CutAndPaste()\n  normal! \"_d\n  normal! P\nendfunction","recorded":"2024-08-24 22:59:49.341226264","filePath":"null","pinned":false},{"value":" ","recorded":"2024-08-24 22:58:17.888612442","filePath":"null","pinned":false},{"value":"sdfasdfasdf\n","recorded":"2024-08-24 22:55:48.704638682","filePath":"null","pinned":false},{"value":"v","recorded":"2024-08-24 22:49:01.343267726","filePath":"null","pinned":false},{"value":"vim.keymap.set(\"v\", \"J\", \":m '\u003e+1\u003cCR\u003egv=gv\")\nvim.keymap.set(\"v\", \"K\", \":m '\u003c-2\u003cCR\u003egv=gv\")\n","recorded":"2024-08-24 22:46:07.157196133","filePath":"null","pinned":false},{"value":"\":m '\u003c-2\u003cCR\u003egv=gv\"","recorded":"2024-08-24 22:46:07.149331619","filePath":"null","pinned":false},{"value":"\":m '\u003e+1\u003cCR\u003egv=gv\"","recorded":"2024-08-24 22:45:31.383830687","filePath":"null","pinned":false},{"value":"ViewProject","recorded":"2024-08-24 22:41:50.404961774","filePath":"null","pinned":false},{"value":"udevadm info --export-db | grep -A 20 -B 20 KEYBOARD\n","recorded":"2024-08-24 22:25:09.16385732","filePath":"null","pinned":false},{"value":"n","recorded":"2024-08-24 22:25:09.159742965","filePath":"null","pinned":false},{"value":"eturn ","recorded":"2024-08-24 22:21:31.820175562","filePath":"null","pinned":false},{"value":"public record PeakPickingOutput\u003cdouble[], double[], double[], double[]\u003e(double[] prob, double[] peak, double[] left, double[] right){}\n","recorded":"2024-08-24 18:19:30.825325053","filePath":"null","pinned":false},{"value":"^","recorded":"2024-08-24 17:38:44.863622039","filePath":"null","pinned":false},{"value":"~","recorded":"2024-08-24 17:31:25.038801855","filePath":"null","pinned":false},{"value":"ˆ","recorded":"2024-08-24 17:26:47.430696972","filePath":"null","pinned":false},{"value":"@","recorded":"2024-08-24 17:26:12.357375758","filePath":"null","pinned":false},{"value":"%","recorded":"2024-08-24 17:25:35.013359416","filePath":"null","pinned":false},{"value":"$,","recorded":"2024-08-24 17:14:35.60642529","filePath":"null","pinned":false},{"value":"\"!\"","recorded":"2024-08-24 17:14:02.75132252","filePath":"null","pinned":false},{"value":"!\"","recorded":"2024-08-24 15:22:25.871202531","filePath":"null","pinned":false},{"value":"curl https://raw.githubusercontent.com/ThePrimeagen/vim-fundamentals/master/course-website/lessons/some-javascript.md \u003e exercise.js \u0026\u0026 vim exercise.js","recorded":"2024-08-24 11:12:43.31251064","filePath":"null","pinned":false},{"value":"curl https://raw.githubusercontent.com/ThePrimeagen/vim-fundamentals/master/course-website/lessons/exercise-2-insert.md \u003e exercise.md \u0026\u0026 vim exercise.md","recorded":"2024-08-24 11:07:18.630282272","filePath":"null","pinned":false},{"value":"curl https://raw.githubusercontent.com/ThePrimeagen/vim-fundamentals/master/course-website/lessons/exercise-1-dyp.md \u003e exercise.md \u0026\u0026 vim exercise.md","recorded":"2024-08-24 10:59:17.104178726","filePath":"null","pinned":false},{"value":"c","recorded":"2024-08-24 10:59:02.248868762","filePath":"null","pinned":false},{"value":"curl https://raw.githubusercontent.com/ThePrimeagen/vim-fundamentals/master/course-website/lessons/exercise-0-hjkl-x.md \u003e exercise.md \u0026\u0026 vim exercise.md","recorded":"2024-08-24 10:53:36.378590952","filePath":"null","pinned":false},{"value":"git clone https://github.com/ThePrimeagen/vim-nav-playground.git","recorded":"2024-08-24 10:45:18.476000483","filePath":"null","pinned":false},{"value":"BDF9-6893","recorded":"2024-08-23 13:24:58.251747018","filePath":"null","pinned":false},{"value":"*.{fxml,xml,htm,html,json,yml,css}","recorded":"2024-08-23 12:53:39.758951422","filePath":"null","pinned":false},{"value":"344828","recorded":"2024-08-23 12:35:32.126837401","filePath":"null","pinned":false},{"value":"[Desktop Entry]\nVersion=1.0\nType=Application\nName=IntelliJ IDEA\nIcon=/opt/idea-\u003cversion\u003e/bin/idea.png\nExec=\"/usr/local/bin/idea\" %f\nComment=Integrated Development Environment\nCategories=Development;IDE;\nTerminal=false\n","recorded":"2024-08-23 11:55:20.743232704","filePath":"null","pinned":false},{"value":"export _JAVA_AWT_WM_NONREPARENTING=1\n./idea.sh\n","recorded":"2024-08-23 11:42:43.473584108","filePath":"null","pinned":false},{"value":"java.awt.AWTError: Can't connect to X11 window server using ':1' as the value of the DISPLAY variable.\n\tat java.desktop/sun.awt.X11GraphicsEnvironment.initDisplay(Native Method)\n\tat java.desktop/sun.awt.X11GraphicsEnvironment$1.run(X11GraphicsEnvironment.java:110)\n\tat java.base/java.security.AccessController.doPrivileged(AccessController.java:319)\n\tat java.desktop/sun.awt.X11GraphicsEnvironment.initStatic(X11GraphicsEnvironment.java:65)\n\tat java.desktop/sun.awt.X11GraphicsEnvironment.\u003cclinit\u003e(X11GraphicsEnvironment.java:60)\n\tat java.desktop/sun.awt.PlatformGraphicsInfo.createGE(PlatformGraphicsInfo.java:68)\n\tat java.desktop/java.awt.GraphicsEnvironment$LocalGE.createGE(GraphicsEnvironment.java:104)\n\tat java.desktop/java.awt.GraphicsEnvironment$LocalGE.\u003cclinit\u003e(GraphicsEnvironment.java:89)\n\tat java.desktop/java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:117)\n\tat java.desktop/sun.awt.X11.XToolkit.\u003cclinit\u003e(XToolkit.java:513)\n\tat java.desktop/sun.awt.PlatformGraphicsInfo.createToolkit(PlatformGraphicsInfo.java:74)\n\tat java.desktop/java.awt.Toolkit.getDefaultToolkit(Toolkit.java:595)\n\tat com.intellij.platform.ide.bootstrap.UiKt$initAwtToolkit$2.invokeSuspend(ui.kt:142)\n\tat com.intellij.platform.ide.bootstrap.UiKt$initAwtToolkit$2.invoke(ui.kt)\n\tat com.intellij.platform.ide.bootstrap.UiKt$initAwtToolkit$2.invoke(ui.kt)\n\tat kotlinx.coroutines.intrinsics.UndispatchedKt.startUndispatchedOrReturn(Undispatched.kt:62)\n\tat kotlinx.coroutines.BuildersKt__Builders_commonKt.withContext(Builders.common.kt:163)\n\tat kotlinx.coroutines.BuildersKt.withContext(Unknown Source)\n\tat com.intellij.platform.diagnostic.telemetry.impl.TracerKt.span(tracer.kt:56)\n\tat com.intellij.platform.diagnostic.telemetry.impl.TracerKt.span$default(tracer.kt:49)\n\tat com.intellij.platform.ide.bootstrap.UiKt.initAwtToolkit(ui.kt:141)\n\tat com.intellij.platform.ide.bootstrap.UiKt.access$initAwtToolkit(ui.kt:1)\n\tat com.intellij.platform.ide.bootstrap.UiKt$scheduleInitAwtToolkit$task$1$1.invokeSuspend(ui.kt:124)\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:104)\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:608)\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:873)\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:763)\n\tat kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:750)","recorded":"2024-08-23 11:40:41.121627541","filePath":"null","pinned":false},{"value":"-Xmaxerrs ","recorded":"2024-08-23 11:09:31.25854443","filePath":"null","pinned":false},{"value":"{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Run Java with Preview\",\n      \"type\": \"shell\",\n      \"command\": \"javac --enable-preview --release 21 ${file} \u0026\u0026 java --enable-preview ${fileBasenameNoExtension}\",\n      \"group\": {\n        \"kind\": \"build\",\n        \"isDefault\": true\n      },\n      \"problemMatcher\": [],\n      \"detail\": \"Compile and run Java with --enable-preview\"\n    }\n  ]\n}\n","recorded":"2024-08-23 11:03:15.676359884","filePath":"null","pinned":false},{"value":"mzmine_0_0.log","recorded":"2024-08-23 10:49:21.382987542","filePath":"null","pinned":false},{"value":"-Djava.util.logging.config.class=io.github.mzmine.main.MZmineLoggingConfiguration\n ","recorded":"2024-08-23 10:37:58.370204954","filePath":"null","pinned":false},{"value":"git reset --hard 857f0dfe4a24df59f85c34baf00fed4a823c6de8","recorded":"2024-08-23 10:37:42.653461225","filePath":"null","pinned":false},{"value":"857f0dfe4a24df59f85c34baf00fed4a823c6de8","recorded":"2024-08-23 10:27:51.840977283","filePath":"null","pinned":false},{"value":"xavxif-basco9-jamMop\n","recorded":"2024-08-23 10:09:36.633747781","filePath":"null","pinned":false},{"value":"file:///home/max/Programming/PeakDetectionProject/SavedModels/traced_check1_test.pt\r\n","recorded":"2024-08-23 09:45:05.438643127","filePath":"null","pinned":false},{"value":"https://drive.google.com/drive/folders/10WrA6INMqBm3vO_gYCICGiNW9GBdkLgy?usp=drive_link","recorded":"2024-08-23 09:39:47.822704764","filePath":"null","pinned":false},{"value":"https://github.com/ElisaGiesecke/AdaDL-for-HJB-Equations","recorded":"2024-08-23 08:39:16.974155975","filePath":"null","pinned":false},{"value":".toArray(size -\u003e new Range[Double][size])\n","recorded":"2024-08-22 19:34:33.163113879","filePath":"null","pinned":false},{"value":"        int lenList = predLabels.size();\n        int lenFeatures = predLabels.get(0).length;\n        List\u003cRange\u003cDouble\u003e[]\u003e allRanges = IntStream.range(0,lenList)\n            .mapToObj(i -\u003e\n                IntStream.range(0,lenFeatures)\n                .mapToObj(j -\u003e (Range\u003cDouble\u003e) Range.closed(\n                    Double.valueOf(standardRegionsRT.get(i)[leftIndices.get(i)[j]]),\n                    Double.valueOf(standardRegionsRT.get(i)[rightIndices.get(i)[j]])\n                    )) \n                .toArray(Range[]::new)\n                )\n            .collect(Collectors.toList());\n","recorded":"2024-08-22 19:29:48.316300869","filePath":"null","pinned":false},{"value":"        List\u003cRange\u003cDouble\u003e\u003e resolved = new ArrayList\u003c\u003e();\n        IntStream.range(0,lenList)\n            .forEach(i -\u003e\n                IntStream.range(0,lenFeatures)\n                .forEach(j -\u003e {\n                    if(predLabels.get(i)[j]){\n                        resolved.add(allRanges.get(i)[j]);\n                    }\n                })\n            )","recorded":"2024-08-22 19:28:58.084818641","filePath":"null","pinned":false},{"value":"(argument mismatch; Collector\u003cRange\u003cDouble\u003e[],CAP#2,List\u003cRange\u003cDouble\u003e[]\u003e\u003e cannot be converted to Collector\u003c? super Range[],CAP#2,List\u003cRange\u003cDouble\u003e[]\u003e\u003e","recorded":"2024-08-22 19:28:40.258653166","filePath":"null","pinned":false},{"value":"if vim.g.vscode then\n    -- VSCode extension\nelse\n   -- ordinary Neovim, add plugins here\nend\n","recorded":"2024-08-22 19:21:07.293015158","filePath":"null","pinned":false},{"value":"        config = function()\n            local harpoon = require(\"harpoon\")\n\n            harpoon:setup()\n\n            vim.keymap.set(\"n\", \"\u003cleader\u003ea\", function() harpoon:list():add() end)\n            vim.keymap.set(\"n\", \"\u003cC-e\u003e\", function() harpoon.ui:toggle_quick_menu(harpoon:list()) end)\n\n            vim.keymap.set(\"n\", \"\u003cC-h\u003e\", function() harpoon:list():select(1) end)\n            vim.keymap.set(\"n\", \"\u003cC-t\u003e\", function() harpoon:list():select(2) end)\n            vim.keymap.set(\"n\", \"\u003cC-n\u003e\", function() harpoon:list():select(3) end)\n            vim.keymap.set(\"n\", \"\u003cC-s\u003e\", function() harpoon:list():select(4) end)\n            vim.keymap.set(\"n\", \"\u003cleader\u003e\u003cC-h\u003e\", function() harpoon:list():replace_at(1) end)\n            vim.keymap.set(\"n\", \"\u003cleader\u003e\u003cC-t\u003e\", function() harpoon:list():replace_at(2) end)\n            vim.keymap.set(\"n\", \"\u003cleader\u003e\u003cC-n\u003e\", function() harpoon:list():replace_at(3) end)\n            vim.keymap.set(\"n\", \"\u003cleader\u003e\u003cC-s\u003e\", function() harpoon:list():replace_at(4) end)\n        end","recorded":"2024-08-22 13:18:33.315274085","filePath":"null","pinned":false},{"value":"{\n    \"ThePrimeagen/harpoon\",\n    branch = \"harpoon2\",\n    dependencies = { \"nvim-lua/plenary.nvim\" }\n}","recorded":"2024-08-22 13:13:09.813045358","filePath":"null","pinned":false},{"value":"git@github.com:ThePrimeagen/init.lua.git","recorded":"2024-08-22 12:11:55.780408169","filePath":"null","pinned":false},{"value":"git@github.com:ThePrimeagen/neovimrc.git","recorded":"2024-08-22 12:09:56.763758775","filePath":"null","pinned":false},{"value":".","recorded":"2024-08-22 09:46:25.95903771","filePath":"null","pinned":false},{"value":"{\n  \"FixCursorHold.nvim\": { \"branch\": \"master\", \"commit\": \"1900f89dc17c603eec29960f57c00bd9ae696495\" },\n  \"LuaSnip\": { \"branch\": \"master\", \"commit\": \"8ae1dedd988eb56441b7858bd1e8554dfadaa46d\" },\n  \"cellular-automaton.nvim\": { \"branch\": \"main\", \"commit\": \"b7d056dab963b5d3f2c560d92937cb51db61cb5b\" },\n  \"cloak.nvim\": { \"branch\": \"main\", \"commit\": \"951b163e55ce7639eb320c450bde9283c4fe968b\" },\n  \"cmp-buffer\": { \"branch\": \"main\", \"commit\": \"3022dbc9166796b644a841a02de8dd1cc1d311fa\" },\n  \"cmp-cmdline\": { \"branch\": \"main\", \"commit\": \"8ee981b4a91f536f52add291594e89fb6645e451\" },\n  \"cmp-nvim-lsp\": { \"branch\": \"main\", \"commit\": \"5af77f54de1b16c34b23cba810150689a3a90312\" },\n  \"cmp-path\": { \"branch\": \"main\", \"commit\": \"91ff86cd9c29299a64f968ebb45846c485725f23\" },\n  \"cmp_luasnip\": { \"branch\": \"master\", \"commit\": \"05a9ab28b53f71d1aece421ef32fee2cb857a843\" },\n  \"copilot.vim\": { \"branch\": \"release\", \"commit\": \"22fd9542e3c47552abab5e685fefd760e4f405b2\" },\n  \"editorconfig.nvim\": { \"branch\": \"master\", \"commit\": \"5b9e303e1d6f7abfe616ce4cc8d3fffc554790bf\" },\n  \"fidget.nvim\": { \"branch\": \"main\", \"commit\": \"1d1042d418ee8cb70d68f1e38db639844331c093\" },\n  \"friendly-snippets\": { \"branch\": \"main\", \"commit\": \"b8fae73a479ae0a1c54f5c98fa687ae8a0addc53\" },\n  \"lazy.nvim\": { \"branch\": \"main\", \"commit\": \"aedcd79811d491b60d0a6577a9c1701063c2a609\" },\n  \"mason-lspconfig.nvim\": { \"branch\": \"main\", \"commit\": \"2b3d247fce06f53934174f5dfe0362c42d65c00c\" },\n  \"mason.nvim\": { \"branch\": \"main\", \"commit\": \"c43eeb5614a09dc17c03a7fb49de2e05de203924\" },\n  \"neogen\": { \"branch\": \"main\", \"commit\": \"70127baaff25611deaf1a29d801fc054ad9d2dc1\" },\n  \"neotest\": { \"branch\": \"master\", \"commit\": \"73043d666780e35185a77589e01bec96a52db910\" },\n  \"neotest-plenary\": { \"branch\": \"master\", \"commit\": \"dcaf5ed67a9e28a246e9783319e5aa6c9ea1c584\" },\n  \"neotest-vitest\": { \"branch\": \"main\", \"commit\": \"87e91bfd9419a8c74bf0d105e2ae31b9692daf0b\" },\n  \"nvim-cmp\": { \"branch\": \"main\", \"commit\": \"538e37ba87284942c1d76ed38dd497e54e65b891\" },\n  \"nvim-lspconfig\": { \"branch\": \"master\", \"commit\": \"1759ea68fbbb1303192020d3e59936189359e0ed\" },\n  \"nvim-treesitter\": { \"branch\": \"master\", \"commit\": \"364b86ec8ea88e4a77ba676b93fb10829d6a9cb3\" },\n  \"plenary\": { \"branch\": \"master\", \"commit\": \"4f71c0c4a196ceb656c824a70792f3df3ce6bb6d\" },\n  \"plenary.nvim\": { \"branch\": \"master\", \"commit\": \"4f71c0c4a196ceb656c824a70792f3df3ce6bb6d\" },\n  \"rose-pine\": { \"branch\": \"main\", \"commit\": \"9d7474f80afe2f0cfcb4fabfc5451f509d844b85\" },\n  \"telescope.nvim\": { \"branch\": \"master\", \"commit\": \"d90956833d7c27e73c621a61f20b29fdb7122709\" },\n  \"tokyonight.nvim\": { \"branch\": \"main\", \"commit\": \"610179f7f12db3d08540b6cc61434db2eaecbcff\" },\n  \"trouble.nvim\": { \"branch\": \"main\", \"commit\": \"f1168feada93c0154ede4d1fe9183bf69bac54ea\" },\n  \"undotree\": { \"branch\": \"master\", \"commit\": \"a1758ba9990b7189f601a3a5acdfc8ca3907a700\" },\n  \"vim-be-good\": { \"branch\": \"master\", \"commit\": \"4fa57b7957715c91326fcead58c1fa898b9b3625\" },\n  \"vim-fugitive\": { \"branch\": \"master\", \"commit\": \"f116dcc8e21021e6fbfb6b0a9f8f7b9566d933f4\" },\n  \"zen-mode.nvim\": { \"branch\": \"main\", \"commit\": \"78557d972b4bfbb7488e17b5703d25164ae64e6a\" }\n}","recorded":"2024-08-22 09:15:12.070733494","filePath":"null","pinned":false},{"value":"return {\n\n    {\n        \"nvim-lua/plenary.nvim\",\n        name = \"plenary\"\n    },\n\n    \"eandrju/cellular-automaton.nvim\",\n}\n","recorded":"2024-08-22 09:13:50.455642736","filePath":"null","pinned":false}]}